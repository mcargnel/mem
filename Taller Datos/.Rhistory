#| label: setup
pacman::p_load(dplyr, ggplot2, rsample, caret, RColorBrewer, knitr, glmnet, pls, rpart.plot, gbm,tibble, rpart, rpart.plot, here)
seed <- 1234
doParallel::registerDoParallel()
vessel_x <- read.table(here("Taller Datos","datos", "Vessel_X.txt"),sep=",")
vessel_y <- read.table(here("Taller Datos","datos", "Vessel_Y.txt"),sep=",")
df <- cbind(vessel_y[,6],vessel_x)
names(df)[1] <- "comp_6"
#| label: setup
pacman::p_load(dplyr, ggplot2, rsample, caret, RColorBrewer, knitr, glmnet, pls, rpart.plot, gbm,tibble, rpart, rpart.plot, here)
seed <- 1234
doParallel::registerDoParallel()
vessel_x <- read.table(here("Taller Datos","datos", "Vessel_X.txt"),sep=",")
vessel_y <- read.table(here("Taller Datos","datos", "Vessel_Y.txt"),sep=",")
df <- cbind(vessel_y[,6],vessel_x)
names(df)[1] <- "comp_6"
#| label: summary-data
summary_x <- data.frame(frecuencias=seq(1,301),
media=sapply(df[,-1], mean),
varianza = sapply(df[,-1], var))
#| label: fig-med
#| fig-cap: Media de la enegía del espectro correspondiente a las frecuencias.
#| echo: false
#| include: true
summary_x %>% ggplot(aes(x=frecuencias, y=media)) +
geom_point(color="#2b8cbe") +
labs(title="Medias por frecuencia", x ="Frecuencia", y = "Medias") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#| label: fig-var
#| fig-cap: Varianza de la energía del espectro correspondiente a las frecuencias.
#| echo: false
#| include: true
summary_x %>% ggplot(aes(x=frecuencias, y=varianza)) +
geom_point(color="#2b8cbe") +
labs(title="Varianzas por frecuencia", x ="Frecuencia", y = "Varianzas") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#| label: fig-covs
#| fig-cap: Covarianza de la energía del espectro correspondiente a las frecuencias y el Compuesto 6
#| echo: false
#| include: true
df_covs <- as.data.frame(t(as.data.frame(cov(df[,1], df[,-1]))))
names(df_covs) <-  "Covarianza"
df_covs$Variable <- seq(1, nrow(df_covs))
df_covs %>% ggplot(aes(x=Variable, y=Covarianza)) +
geom_point(color="#2b8cbe") +
labs(title="Covarianzas por frecuencia", x ="Frecuencia", y = "Covarianzas") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#| label: fig-hist
#| fig-cap: Histograma y estimación de densidad del compuesto $SO_3$.
#| echo: false
#| include: true
df %>%
ggplot(aes(x = comp_6)) +
geom_histogram(aes(y = after_stat(..density..)),
fill = "#2b8cbe", alpha = 0.5, bins = 10) +
geom_density(color = "#2b8cbe", linewidth = 1.5) +
theme_minimal() +
labs(x = expression(SO[3]), y = "Densidad", title = expression("Histograma del compuesto " * S0[3])) +
theme(plot.title = element_text(hjust=0.5))
#| label: train-set-split
set.seed(seed)
split <- initial_split(df, prop = 0.8)
train <- training(split)
test <- testing(split)
#| label: pcr-fit
set.seed(seed)
pcr_fit <- pcr(formula = comp_6 ~ ., data = train, scale. = TRUE,
validation = "CV")
pcr_fit_msep <- MSEP(pcr_fit, estimate="CV")
pcr_fit_componentes <- which.min(pcr_fit_msep$val)
pcr_fit_mse <- min(pcr_fit_msep$val)
pca_df <- data.frame(Componentes = seq(1,129),
pca_mse = t(as.data.frame(pcr_fit_msep$val))[,1])
#| label: fig-pca
#| fig-cap: MSE en funcón del número de componentes en PCR, estimado por CV.
#| echo: false
#| include: true
pca_df %>% ggplot(aes(x=Componentes, y=pca_mse)) +
geom_line(color="#2b8cbe") +
geom_vline(xintercept = pcr_fit_componentes, linetype="dashed") +
annotate("text", x=117, y=0.005, label=pcr_fit_componentes, angle=90, size=4) +
labs(title="PCR - MSE vs Número de componentes", y = "MSE") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#| label: pls-fit
set.seed(seed)
pls_fit <- plsr(formula = comp_6 ~ ., data = train, scale. = TRUE, validation = "CV")
pls_fit_msep <- MSEP(pls_fit, estimate = "CV")
pls_fit_componentes <- which.min(pls_fit_msep$val)
pls_fit_mse <- min(pls_fit_msep$val)
pls_df <- data.frame(Componentes = seq(1,129),
pls_mse = t(as.data.frame(pls_fit_msep$val))[,1])
#| label: fig-pls
#| fig-cap: MSE en funcón del número de componentes en PLS, estimado por CV.
#| echo: false
#| include: true
pls_df %>% filter(pls_mse<0.02) %>% ggplot(aes(x=Componentes, y=pls_mse)) +
geom_line(color="#2b8cbe") +
geom_vline(xintercept = pls_fit_componentes, linetype = "dashed") +
annotate("text", x=17.5, y=0.005, label=pls_fit_componentes, angle=90, size=4) +
labs(title="PLS - MSE vs Número de componentes", y = "MSE") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#| label: reg-fit
alphas <- seq(0,1, 0.1)
lambdas <- c()
mse <- c()
for(i in alphas){
set.seed(seed)
fitted_glmnet <- cv.glmnet(as.matrix(train[,-1]), as.matrix(train[,1]), nfolds=5, type.measure="mse", alpha=i)
lambdas <- append(lambdas, fitted_glmnet$lambda.min)
mse <- append(mse, min(fitted_glmnet$cvm))
}
results_elastic_net <- data.frame(Alpha = alphas, Lambda= lambdas, MSE= mse) %>%
arrange(MSE) %>%
mutate(log_lambda = log(Lambda))
#| label: ridge-fit
set.seed(seed)
ridge_model <- cv.glmnet(as.matrix(train[,-1]),as.matrix(train[,1]), nfolds=5,type.measure="mse", alpha=0)
ridge_df <- data.frame(lambda_log=log(ridge_model$lambda),
mse = ridge_model$cvm)
ridge_df %>% ggplot(aes(x=lambda_log, y=mse)) +
geom_point(color="#2b8cbe") + theme_minimal() +
labs(title=expression("MSE en función de " * log(lambda) * " para Ridge"), y = "MSE", x=expression(log(lambda))) +
theme(plot.title = element_text(hjust = 0.5))
plot(ridge_model)
#| label: lasso-fit
set.seed(seed)
lasso_model <- cv.glmnet(as.matrix(train[,-1]),as.matrix(train[,1]), nfolds=5,type.measure="mse", alpha=1)
lasso_df <- data.frame(lambda_log = log(lasso_model$lambda),
mse = lasso_model$cvm)
#| label: fig-lasso-cv
#| fig-cap: Estimación del error cuadrático medio por validación cruzada en la muestra de entrenamiento para distintos valores de $\log(\lambda)$ en el modelo LASSO.
#| echo: false
#| include: true
lasso_df %>% ggplot(aes(x=lambda_log, y=mse)) +
geom_point(color="#2b8cbe") + theme_minimal() +
labs(title=expression("MSE en función de " * log(lambda) * " para LASSO"), y = "MSE", x=expression(log(lambda))) +
theme(plot.title = element_text(hjust = 0.5))
plot(lasso_model)
plot(lasso_model, color="black")
plot(lasso_model, col="black")
plot(lasso_model, col="blue")
plot(ridge_model)
plot(lasso_model)
plot(elastic_model)
#| label: elastic-net-final-fit
set.seed(seed)
elastic_model <- cv.glmnet(as.matrix(train[,-1]),as.matrix(train[,1]), nfolds=5,type.measure="mse", alpha=0.9)
elastic_df <- data.frame(lambda_log = log(elastic_model$lambda),
mse = elastic_model$cvm)
plot(elastic_model)
plot(lasso_model, col="blue")
plot(lasso_model, col="blue")
plot(lasso_model,pch = 16, col = "blue")
plot(lasso_model, pch = 16, col = "blue", main = "Cross-Validated Lasso Model"))
library(glmnet)
set.seed(seed)
lasso_model <- cv.glmnet(as.matrix(train[,-1]),as.matrix(train[,1]), nfolds=5,type.measure="mse", alpha=1)
plot(lasso_model, pch = 16, col = "blue", main = "Cross-Validated Lasso Model")
